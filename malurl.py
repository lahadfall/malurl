import streamlit as st
import pandas as pd
import tensorflow as tf
import numpy as np
import random
import os
import gdown
import re
import pickle
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

@st.cache_resource
def download_file_from_gdrive(file_id, destination):
    if not os.path.exists(destination):
        url = f"https://drive.google.com/uc?id={file_id}"
        gdown.download(url, destination, quiet=False)
    else:
        print(f"{destination} existe d√©j√†. T√©l√©chargement ignor√©.")

# === Chargements ===
@st.cache_resource
def load_model_and_tokenizer():
    try:
        model = load_model("malurl_modele.keras")
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {e}")
        st.stop()
    with open("tokenizer.pkl", "rb") as f:
        tokenizer = pickle.load(f)
    return model, tokenizer


@st.cache_data
def load_data():
    df = pd.read_csv("malicious_phish.csv")
    return df

@st.cache_data
def prepare_label_encoder(df):
    encoder = LabelEncoder()
    encoder.fit(df['type'])
    return encoder

# === Nettoyage URL ===
def clean_url(url):
    url = url.lower()
    return re.sub(r'[^a-z0-9]', ' ', url)

# === Pr√©diction ===
def predict_url(url, model, tokenizer, encoder):
    clean = clean_url(url)
    seq = tokenizer.texts_to_sequences([clean])
    padded = pad_sequences(seq, maxlen=100)
    pred = model.predict(padded)
    label_index = pred.argmax(axis=1)[0]
    return encoder.inverse_transform([label_index])[0]

# === Interface Streamlit ===
st.set_page_config(page_title="Malicious URL Detector", layout="wide")
# === Menu de navigation dans la sidebar ===
menu = st.sidebar.radio(
    "üìå Menu de navigation",
    [
        "Accueil",
        "Pr√©diction d'une URL ",
        "Pr√©dictions sur 15 URLs al√©atoires"
    ]
)

        
# === T√©l√©chargement des fichiers depuis Google Drive ===

download_file_from_gdrive("1-AIPtEak9q7fDJJU3JN_-qFeeHH3x5Tx", "malurl_modele.keras")
download_file_from_gdrive("1R1Nr1RLA81QC22t7MXrmkMQv0if-v5Oh", "malicious_phish.csv")
download_file_from_gdrive("10SqRzMMnbSzs9XWllbNYKBKWQjF2i2qw", "tokenizer.pkl")


# Chargement des composants
model, tokenizer = load_model_and_tokenizer()
df = load_data()
label_encoder = prepare_label_encoder(df)

if menu == "Accueil":
    st.title("üîç D√©tection d'URLs malveillantes avec LSTM + GloVe")
    st.markdown("""
    Cette application utilise un mod√®le LSTM pour pr√©dire la cat√©gorie d'une URL. 
    Elle permet de visualiser la distribution des classes, 
    tester une URL al√©atoire et examiner les pr√©dictions sur un √©chantillon de 15 URLs.
    """)


    # Affichage conditionnel du DataFrame
    if st.checkbox("Afficher le DataFrame brut"):
        st.dataframe(df.head(100))

    # R√©partition des classes
    st.subheader("üìä R√©partition des classes")
    fig, ax = plt.subplots()
    sns.countplot(data=df, x="type", order=df["type"].value_counts().index, palette="viridis", ax=ax)
    ax.set_title("Nombre d'exemples par classe")
    st.pyplot(fig)
    
    
elif menu == "Pr√©diction d'une URL ":
    # === Pr√©diction sur un URL al√©atoire ===
    st.subheader("üîé Pr√©diction sur une URL al√©atoire")
    if st.button("üé≤ Tirer une URL al√©atoire"):
        sample = df.sample(1).iloc[0]
        url = sample['url']
        true_label = sample['type']
        pred_label = predict_url(url, model, tokenizer, label_encoder)

        col1, col2 = st.columns(2)
        col1.markdown(f"**URL brut :** {url}")
        col1.markdown(f"**Classe r√©elle :** {true_label}")
        col1.markdown(f"**Classe pr√©dite :** {pred_label}")

        if pred_label == true_label:
            col2.success("‚úÖ Pr√©diction correcte")
        else:
            col2.warning("‚ö†Ô∏è Pr√©diction incorrecte")
            
            
    # === Pr√©diction manuelle d'une URL ===
    st.subheader("üß™ Tester une URL personnalis√©e")

    user_url = st.text_input("Entrez une URL √† tester :", placeholder="https://example.com/malicious")

    if st.button("üîç Pr√©dire cette URL"):
        if user_url.strip() == "":
            st.warning("‚ùó Veuillez entrer une URL valide.")
        else:
            pred_label = predict_url(user_url, model, tokenizer, label_encoder)
            st.markdown(f"**Classe pr√©dite :** `{pred_label}`")


# === Pr√©dictions sur 15 URLs al√©atoires ===
elif menu == "Pr√©dictions sur 15 URLs al√©atoires":
    st.subheader("üìã Pr√©diction sur 15 URLs selectionn√©es al√©atoirement dans la base de test")
    if st.button("üé≤ Tirer 15 URLs al√©atoires"):
        sample_df = df.sample(15).reset_index(drop=True)
        sample_df['predicted_label'] = sample_df['url'].apply(lambda x: predict_url(x, model, tokenizer, label_encoder))
        sample_df['correct'] = sample_df['type'] == sample_df['predicted_label']

        def highlight_incorrect(row):
            color = 'background-color: salmon'
            return [color if not row['correct'] and col == 'correct' else '' for col in row.index]

        st.dataframe(sample_df[['url', 'type', 'predicted_label', 'correct']].style.apply(highlight_incorrect, axis=1))


